# address <=> balance map
data balances[]

# user_number (0...n) <=> address
data user_numbers[]

data num_users

# 1 ether
macro REGISTRATION_FEE: 1000000000000000000

def init():
    self.num_users = 1
    self.user_numbers[num_users] = msg.sender
    self.balances[msg.sender] = 0

# register your address and send to someone
def register:
    # register them if not already registered
    if not self.balances[msg.sender]:
        if msg.value >= REGISTRATION_FEE:
            self.num_users = self.num_users + 1
            self.user_numbers[num_users] = msg.sender
            self.balances[msg.sender] = 0
        else:
            return(1)

    # change balance of someone at random
    random_index = mod(block.prevhash, self.num_users)
    random_receiver = self.user_numbers[random_index + 1]
    self.balances[random_receiver] += msg.value
    return(0)

# take you balance
def withdraw_balance:
    if self.balances[msg.sender]:
        balance = self.balances[msg.sender]
        if(!send(msg.sender, balance)):
            return(0)
        else:
            return(1)

    return(0)
