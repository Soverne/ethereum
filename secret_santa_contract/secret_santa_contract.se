# Contract that will forward ETH sent to it to some randomly chose
# lucky person. To be considered as a candidate, you need to have
# sent above REGISTRATION_FEE ETH when calling register().

# Map to keep track of users, if they have registered and their balances.
data balances[](seen, balance)

# user_index is a mapping from an a user ID (0...n) to their address
# Since we don't have arrays in Serpent, we need to build an index.
data user_index[]

# number of users in the system (helps bound our index calculations)
data num_users

# Send above this to be registerd in the pool of users for secret santa.
macro REGISTRATION_FEE: 10000000000000000 # 0.01 ETH

macro USER_SEEN: 1 # boolean for TRUE

# Return values
macro SUCCESS: 0 # like unix
macro REGISTRATION_FEE_TOO_LOW: 1
macro NO_BALANCE_ERROR: 2
macro FAILURE_TO_SEND_BALANCE: 3

def init:
  self.num_users = 1
  self.user_index[self.num_users] = msg.sender
  self.balances[msg.sender].seen = USER_SEEN

# register your address and send to someone
def register:
    # register the user if not already registered
    if not self.balances[msg.sender].seen == USER_SEEN:
        if msg.value >= REGISTRATION_FEE:
            self.balances[msg.sender].seen = USER_SEEN
            self.num_users += 1
            self.user_index[self.num_users] = msg.sender
        else:
            return(REGISTRATION_FEE_TOO_LOW)

    # change balance of someone at random
    # first get random seed from previous block hash
    # but, since we use it as an int, check for negative
    if block.prevhash < 0:
        prevhash = 0 - block.prevhash
    else:
        prevhash = block.prevhash

    random_index = prevhash % self.num_users
    random_receiver = self.user_index[random_index + 1]
    self.balances[random_receiver].balance += msg.value
    return(SUCCESS)

# allow user to withdraw there balance if there is one
def withdraw_balance:
    # being extra cautious here
    if self.balances[msg.sender].seen == USER_SEEN:
        balance = self.balances[msg.sender].balance
    else:
        balance = 0

    if balance > 0:
        # zero the balance so that sender cannot
        # withdraw the same balance multiple times
        self.balances[msg.sender].balance = 0

        # Also important to lower the balance before sending funds
        # incase send() throws an error.
        if(!send(msg.sender, balance)):
            return(FAILURE_TO_SEND_BALANCE)
        else:
            return(SUCCESS)
    else:
        return(NO_BALANCE_ERROR)
